#include "main.h"

/**
 * length_of_token - to find token length
 *
 * @s: string holding the command
 * @delimiter: the delimiter
 * Return: token length
 */
int length_of_token(char *s, char *delimiter)
{
	int length = 0;

	while (*s && *s != *delimiter)
	{
		length++;
		s++;
	}
	return (length);
}

/**
 * token_count - count tokens
 *
 * @s: string holding command
 * @delimiter: delimiter
 * Return: characters in string holding command
 */
int token_count(char *s, char *delimiter)
{
	int elem = 0;
	int token = 0;
	int length = 0;

	for (elem = 0; *(s + elem); elem++)
	{
		length++;
	}
	for (elem = 0; elem < length; elem++)
	{
		if (*(s + elem) != *delimiter)
		{
			token++;
			elem += length_of_token(s + elem, delimiter);
		}
	}

	return (token);
}

/**
 * _strtok - tokenizes command string
 *
 * @cmdInput: the command string
 * @delimiter: delimiter used to tokenize string
 * Return: pointer to tokenized string
 */
char *_strtok(char *cmdInput, char *delimiter)
{
	static char *current;
	char *lineptr;
	int i;
	int token_len;

	if (cmdInput != NULL)
	{
		current = cmdInput;
	}
	if (current == NULL || *current == '\0')
	{
		return (NULL);
	}
	lineptr = current;

	while (*current != '\0' && _strchr(delimiter, *current) != NULL)
	{
		current++;
	}
	/**
	 * it iterates over using the current pointer to find the delimiter
	 * in the input string(cmdInput) and move it to the next token
	 */
	if (*current == '\0')
	{
		return (NULL);
	}
	lineptr = current;
	/**
	 * set lineptr to point to the current token
	 */
	token_len = length_of_token(current, delimiter);
	current += token_len;
	/**
	 * increment the current pointer the length of the current token
	 */
	i = 0;
	while (i < token_len)
	{
		if (_strchr(delimiter, lineptr[i]) != NULL)
		{
			lineptr[i] = '\0';
			break;
		}
		i++;
	}
	/**
	 * iterates through the current token(lineptr) and checks for a delimiter
	 * if one is found its replaces with a '\0' to show the end
	 */
	return (lineptr);
}
